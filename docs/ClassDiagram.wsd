@startuml ResourceManager.js
interface IResourceFileHandler
{
    CheckApplicability(string fileName) : bool
    Create(string fileName) : FileResource
}

abstract class ResourceFileHandler<T extends FileResource>
{
    + ResourceFileHandler()
    + {abstract} CheckApplicability(string fileName) : bool
    + {abstract} Create(string fileName) : T
}

abstract class Resource
{
    - locale : CultureInfo
    + Resource()
    + Resource(CultureInfo locale)
    + Locale { get; } : CultureInfo
    # {abstract} ResourceStore { get; } : object
    + Get<T>(string id) : T
    + Exists(string id) : bool
}

class ResourceManager
{
    + ResourceManager(string baseFileName)
    + ResourceManager(string baseFileName, CultureInfo locale)
    + ResourceManager(Resource[] resources)
    + ResourceManager(Resource[] resources, CultureInfo locale)
    + Locale { get; set; } : CultureInfo
    # ResourceFileHandlers { get; } : ResourceFileHandler[]
    # Resources { get; } : Resource[]
    + Get<T>(string id) : T
    # ResourceFromFile(string fileName) : FileResouce
}

class FileResource
{
    + Cached { get; set; } : bool
    # ParseFile(string fileName) : object
}

class JSONResource
{
}

class YAMLResource
{
}

class JavaScriptResource
{
}

JSONResource --|> FileResource
YAMLResource --|> FileResource
JavaScriptResource --|> FileResource
FileResource -|> Resource
Resource -* ResourceManager
IResourceFileHandler -|> ResourceFileHandler
ResourceFileHandler --* ResourceManager
@enduml